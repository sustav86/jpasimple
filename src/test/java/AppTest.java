/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import entity.Category;
import entity.Topic;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import java.util.List;

import static org.junit.Assert.*;

public class AppTest {

    private EntityManager em;

    @Before
    public void init() {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory( "JavaRush" );
        em = emf.createEntityManager();
        em.getTransaction().begin();
    }

    @After
    public void close() {
        if (em.getTransaction().isActive()) {
            em.getTransaction().commit();
        }
        em.getEntityManagerFactory().close();
        em.close();
    }

    @Test public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    @Test
    public void shouldStartHibernate() {
        System.out.println(em);
    }

    @Test
    public void shouldPersistCategory() {
        Category cat = new Category();
        cat.setTitle("new category");
        // JUnit обеспечит тест свежим EntityManager'ом
        em.persist(cat);
//        em.flush();
        Category result = em.find(Category.class, 2L);
        assertNotNull(result);
    }

    @Test
    public void shouldHibernateLifecycle() {
        // 1. New или Transient (временный)
        Category cat = new Category();
        cat.setTitle("new category");
// 2. Managed или Persistent
        em.persist(cat);
// 3. Транзакция завершена, все сущности в контексте detached
        em.getTransaction().begin();
        em.getTransaction().commit();
// 4. Сущность изымаем из контекста, она становится detached
        em.detach(cat);
// 5. Сущность из detached можно снова сделать managed
        Category managed = em.merge(cat);
// 6. И можно сделать Removed. Интересно, что cat всё равно detached
        em.remove(managed);
    }

    @Test
    public void shouldPersistCategoryAndTopics() {
        Category cat = new Category();
        cat.setTitle("test");
        Topic topic = new Topic();
        topic.setTitle("topic");
        topic.setCategory(cat);
        em.persist(cat);
    }

    @Test
    public void shouldPerformQuery() {
        Category cat = new Category();
        cat.setTitle("query");
        em.persist(cat);
        Query query = em.createQuery("SELECT c from Category c WHERE c.title = 'query'");
        assertNotNull(query.getSingleResult());
    }

    @Test
    public void shouldFindWithCriteriaAPI() {
        Category cat = new Category();
        em.persist(cat);
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Category> query = cb.createQuery(Category.class);
        Root<Category> c = query.from(Category.class);
        query.select(c);
        List<Category> resultList = em.createQuery(query).getResultList();
        assertEquals(1, resultList.size());
    }
}
